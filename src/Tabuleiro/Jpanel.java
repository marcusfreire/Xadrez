package Tabuleiro;

import java.awt.Color;
import java.awt.Point;
import java.util.ArrayList;
//import javax.swing.JButton;
import modelo.pecas.*;
import xadrezfinal.FramePrincipal;



/**
 * @author  Pedro Kislansky e Luís Lima
 * @version 1.0
 */
public class Jpanel extends javax.swing.JPanel{
    private FramePrincipal fp;
    public ArrayList<PecaAbstrata> pecas;
    private PecaAbstrata peca=null;
    private int contador;
    private int contadorCorTabuleiro;
    private int x;
    private int y;
    
    /** Creates new form Tabuleiro */
    public Jpanel(FramePrincipal fp) {
        initComponents();
        contador=1;
        contadorCorTabuleiro=1;
        x=0;
        y=0;
        pecas=new ArrayList<PecaAbstrata>();
        this.construirTabuleiroXadrez();
        this.fp=fp;

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(51, 102, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 399, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void construirTabuleiroXadrez(){
        
       construirPrimeiraUltimaLinha("Branco");
       construirLinhaPeos("Branco");
       construirLinhasEmBranco();
       construirLinhaPeos("Preto");
       construirPrimeiraUltimaLinha("Preto");
       this.pintarTabuleiro();
       
    }
    
    private void pintarTabuleiro(){
        int i=0;
        int j=0;
        int incremento=0;
        while(i<8){
            while(j<8){
                if(i%2==0){
                    if(j%2==0){
                        this.pecas.get(i+(j+incremento)).setBackground(new Color(238,238,238));
                    }else{
                        this.pecas.get(i+(j+incremento)).setBackground(new Color(255,255,255));
                    }
                }else{
                    if(j%2==0){
                        this.pecas.get(i+(j+incremento)).setBackground(new Color(255,255,255));                        
                    }else{
                        this.pecas.get(i+(j+incremento)).setBackground(new Color(238,238,238));
                    }
                }
                j++;
            }
            j=0;
            i++;
            incremento+=7;
        }
        this.repaint();
    }
    
    private void construirPrimeiraUltimaLinha(String cor){

            adicionarAoTabuleiro(new Torre(cor));
            adicionarAoTabuleiro(new Cavalo(cor));
            adicionarAoTabuleiro(new Bispo(cor));
            adicionarAoTabuleiro(new Rei(cor));
            adicionarAoTabuleiro(new Rainha(cor));
            adicionarAoTabuleiro(new Bispo(cor));
            adicionarAoTabuleiro(new Cavalo(cor));
            adicionarAoTabuleiro(new Torre(cor));
    }
    
    private void construirLinhaPeos(String cor){
        
        for(int i=0;i<8;i++){
            adicionarAoTabuleiro(new Peao(cor));
        }
        
    }
    
    private void construirLinhasEmBranco(){
        for(int i=0;i<32;i++){
            adicionarAoTabuleiro(new PecaVazia());
        }
    }
    private void adicionaMovimento(PecaAbstrata peca){
        String tipo = peca.getClass().toString();
        if (tipo.contains("Peao")){
            peca.setMovimento("Peao");
        }else if (tipo.contains("Torre")){
            peca.setMovimento("Torre");
        }else if (tipo.contains("Cavalo")){
            peca.setMovimento("Cavalo");
        }else if (tipo.contains("Bispo")){
            peca.setMovimento("Bispo");
        }else if (tipo.contains("Rei")){
            peca.setMovimento("Rei");
        }else if (tipo.contains("Rainha")){
            peca.setMovimento("Rainha");
        }
        else if (tipo.contains("PecaVazia")){
            peca.setMovimento("PecaVazia");
        }
    }
    
    private void adicionarAoTabuleiro(PecaAbstrata peca){
        peca.setLocation(new Point(x,y));
        //adicionaMovimento(peca);
        peca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });
        
        if(contador%8!=0){
            x+=50;
        }else{ 
            x=0;
            y+=50;
        }
        contadorCorTabuleiro++;
        this.add(peca);
        pecas.add(peca);
        contador++;
    }
   
    private void ActionPerformed(java.awt.event.ActionEvent evt) {
        PecaAbstrata pecaClicada;
        pecaClicada = (PecaAbstrata)evt.getSource();
        String cor = pecaClicada.getCor();
        //System.out.println("Clicou "+pecaClicada.getClass()+" cor: "+cor+" Cor do Jogador: "+fp.getJogadores().get(fp.getJogadorDaVez()).getPeca());
        //System.out.println("Cor da peça: "+pecaClicada.getCor().contains("Branco"));
        //pecaClicada.getMovimento();
        if(fp.getJogada().getJogadaRecente()==-1){
            if(cor.contains(fp.getJogadores().get(fp.getJogadorDaVez()).getPeca())){
                this.iluminaCaminho(pecaClicada);
            }
        }else{
            this.movePeca(pecaClicada);
            fp.getJogada().setJogadaRecente(-1);
            if(this.jogoTerminou(peca)){
                fp.terminarJogo();
            }
        }
        
    }
    
    private void movePeca(PecaAbstrata posicao){
        String cor = posicao.getCor();
        //System.out.println("movePeca "+cor);
        if(posicao.getBackground().equals(new Color(0,180,0))){
            PecaAbstrata vazio=new PecaVazia();
            //adicionaMovimento(vazio);
            vazio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
                }
            });
            
            if(this.peca instanceof Peao){
                ((Peao)this.peca).setMexeu(true);
            }
            
                     
            vazio.setLocation(this.peca.getLocation());
            this.peca.setLocation(posicao.getLocation());
            
            int i=this.pecas.indexOf(posicao);
            int j=this.pecas.indexOf(this.peca);
            
            this.pecas.remove(i);
            this.pecas.add(i,this.peca);
            this.pecas.remove(j);
            this.pecas.add(j, vazio);
            
            
            this.remove(this.peca);
            this.remove(posicao);
            
            //this.peca.setLocation(posicao.getLocation());
            this.add(this.peca);
            this.add(vazio);
            
            this.repaint();
            
            if(fp.getJogadorDaVez()==0){
                fp.setJogadorDaVez(1);
            }else{
                fp.setJogadorDaVez(0);
            }
            
            fp.getJogada().setJogador(fp.getJogadores().get(fp.getJogadorDaVez()));
            fp.trocaJogador();
        }
        this.limparIluminados();
        this.pintarTabuleiro();
    }
   
    private void iluminaCaminho(PecaAbstrata pecaEmMovimento){
        String cor = pecaEmMovimento.getCor();
        //System.out.println("Ilumina "+cor);
        limparIluminados();
        
        if(pecaEmMovimento instanceof Peao){
            this.verificaTrajetóriaPeao((Peao)pecaEmMovimento);
            
        }else if(pecaEmMovimento instanceof Bispo){
            this.verificaTrajetoriaBispo((Bispo)pecaEmMovimento);
            
        }else if(pecaEmMovimento instanceof Torre){
            verificaTrajetoriaTorre((Torre)pecaEmMovimento);
            
        }else if(pecaEmMovimento instanceof Cavalo){
            verificaTrajetoriaCavalo((Cavalo)pecaEmMovimento);
            
        }else if(pecaEmMovimento instanceof Rainha){
            verificaTrajetoriaRainha((Rainha)pecaEmMovimento);
            
        }else if(pecaEmMovimento instanceof Rei){
            verificaTrajetoriaRei((Rei)pecaEmMovimento);
            
        }
        this.peca=pecaEmMovimento;
        fp.getJogada().setJogadaRecente(0);
        this.repaint();
    }
    
    private void verificaTrajetóriaPeao(Peao peao){
        int temp=0;
        int jogadas=0;
        PecaAbstrata bt=null;
        boolean flag=true;
        int x=peao.getX();
        int y=peao.getY();
        String cor= peao.getCor();
        
        int qtdCasas = 2;
        if(peao.isMexeu()){
            qtdCasas = 1;
        }
        
        while(flag && jogadas < qtdCasas){
            if (cor.contains("Branco")){
                y+=50;
            }else{
                y-=50;
            }
            
            temp=this.getPeca(x, y);
            if(temp!=-1){
                bt=this.pecas.get(temp);
                //("BT "+temp+" "+bt.getCor()+" "+ bt.getClass());
                    if(bt instanceof PecaVazia){
                        iluminar(temp);
                        jogadas++;
                    }else if (cor.equals("Branco")) {
                            if(bt.getCor().contains("Preto")){
                                flag=false;
                        }else{
                            if(bt.getCor().contains("Branco")){
                                flag=false;
                            }
                        }
                    }else{
                        flag=false;
                    }
            }
        }
                
        for(int i=0;i<2;i++){
            
            x=peao.getX();
            y=peao.getY();
          if (cor.contains("Branco")){
                if(i==0){
                    y+=50;
                    x+=50;
                }else{
                    y+=50;
                    x-=50;
                }
            }else{
                if(i==0){
                    y-=50;
                    x-=50;
                }else{
                    y-=50;
                    x+=50;
                }
            }
            
                
            temp = this.getPeca(x, y);
                
            if(temp!=-1){
                
                bt=this.pecas.get(temp);
                if (cor.equals("Branco")) {
                    if(bt.getCor().contains("Preto")){
                        iluminar(temp);
                    }
                }else{
                    if(bt.getCor().contains("Branco")){
                        iluminar(temp);
                        }                         
                    }               
            }
            
        }
        
    }
      
    private void verificaTrajetoriaBispo(Bispo bispo){
        int temp=0;
        PecaAbstrata bt=null;
        boolean flag=true;
        int x=bispo.getX();
        int y=bispo.getY();
        String cor= bispo.getCor();
        for(int i=0;i<4;i++){
            while(flag){
                if(i==0){
                    y+=50;
                    x+=50;
                }else if(i==1){
                    y-=50;
                    x-=50;
                }else if(i==2){
                    y-=50;
                    x+=50;
                }else{
                    y+=50;
                    x-=50;
                }
                temp=this.getPeca(x, y);
                if(temp!=-1){
                    bt=this.pecas.get(temp);
                        if(bt instanceof PecaVazia){
                            iluminar(temp);
                        }else if (cor.equals("Branco")) {
                            if(bt.getCor().contains("Preto")){
                                flag=false;
                                iluminar(temp);
                            }else{
                                flag=false;
                            }
                   }else{
                            if(bt.getCor().contains("Branco")){
                                flag=false;
                                iluminar(temp);
                            }else{
                                flag=false;
                            }
                        
                    }
                }else{
                    flag=false;
                }
            }
            x=bispo.getX();
            y=bispo.getY();
            flag=true;
        }
    }
    
    
    private void verificaTrajetoriaTorre(Torre torre){
        int temp=0;
        PecaAbstrata bt=null;
        boolean flag=true;
        int x=torre.getX();
        int y=torre.getY();
        String cor= torre.getCor();
        
        for(int i=0;i<4;i++){
            while(flag){
                if(i==0){
                    y+=50;
                }else if(i==1){
                    y-=50;
                }else if(i==2){
                    x+=50;
                }else{
                    x-=50;
                }
                temp=this.getPeca(x, y);
                if(temp!=-1){
                    bt=this.pecas.get(temp);
                        if(bt instanceof PecaVazia){
                            iluminar(temp);
                        }else if (cor.equals("Branco")) {
                            if(bt.getCor().contains("Preto")){
                                flag=false;
                                iluminar(temp);
                            }else{
                                flag=false;
                            }
                   }else{
                            if(bt.getCor().contains("Branco")){
                                flag=false;
                                iluminar(temp);
                            }else{
                                flag=false;
                            }
                        
                    }
                }else{
                    flag=false;
                }
            }
            x=torre.getX();
            y=torre.getY();
            flag=true;
        }
    }
    
    
    private void verificaTrajetoriaCavalo(Cavalo cavalo){
        int temp=0;
        PecaAbstrata bt=null;
        boolean flag=true;
        int x=cavalo.getX();
        int y=cavalo.getY();
        String cor= cavalo.getCor();
        
        for(int i=0;i<8;i++){
                if(i==0){
                    y+=100;
                    x+=50;
                }else if(i==1){
                    y-=100;
                    x-=50;
                }else if(i==2){
                    y-=50;
                    x-=100;
                }else if(i==3){
                    y+=50;
                    x+=100;
                }else if(i==4){
                    y-=100;
                    x+=50;
                }else if(i==5){
                    y-=50;
                    x+=100;
                }else if(i==6){
                    x-=50;
                    y+=100;
                }else if(i==7){
                    x-=100;
                    y+=50;
                }
                temp=this.getPeca(x, y);
                if(temp!=-1){
                    bt=this.pecas.get(temp);
                    if (cor.equals("Branco")) {
                        if(bt instanceof PecaVazia||bt.getCor().contains("Preto")){
                        iluminar(temp);
                    }
                    }else{
                        if(bt instanceof PecaVazia||bt.getCor().contains("Branco")){
                            iluminar(temp);
                            }                         
                    }
                    
                }
            x=cavalo.getX();
            y=cavalo.getY();
        }
    }
        
  
    private void verificaTrajetoriaRainha(Rainha rainha){
        int temp=0;
        PecaAbstrata bt=null;
        boolean flag=true;
        int x=rainha.getX();
        int y=rainha.getY();
        String cor= rainha.getCor();
        
        for(int i=0;i<8;i++){
            while(flag){
                if(i==0){
                    y+=50;
                }else if(i==1){
                    y-=50;
                }else if(i==2){
                    x+=50;
                }else if(i==3){
                    x-=50;
                }else if(i==4){
                    y+=50;
                    x+=50;
                }else if(i==5){
                    y-=50;
                    x-=50;
                }else if(i==6){
                    y-=50;
                    x+=50;
                }else{
                    y+=50;
                    x-=50;
                }
                temp=this.getPeca(x, y);
                if(temp!=-1){
                    bt=this.pecas.get(temp);
                        if(bt instanceof PecaVazia){
                            iluminar(temp);
                        }else if (cor.equals("Branco")) {
                            if(bt.getCor().contains("Preto")){
                                flag=false;
                                iluminar(temp);
                            }else{
                                flag=false;
                            }
                   }else{
                            if(bt.getCor().contains("Branco")){
                                flag=false;
                                iluminar(temp);
                            }else{
                                flag=false;
                            }
                        
                    }
                }else{
                    flag=false;
                }
            }
            x=rainha.getX();
            y=rainha.getY();
            flag=true;
        }
    }
    
    private void verificaTrajetoriaRei(Rei rei){
        int temp=0;
        PecaAbstrata bt=null;
        boolean flag=true;
        int x=rei.getX();
        int y=rei.getY();
        String cor= rei.getCor();
        for(int i=0;i<8;i++){
                if(i==0){
                    y+=50;
                }else if(i==1){
                    y-=50;
                }else if(i==2){
                    x-=50;
                }else if(i==3){
                    x+=50;
                }else if(i==4){
                    y-=50;
                    x+=50;
                }else if(i==5){
                    y+=50;
                    x-=50;
                }else if(i==6){
                    x-=50;
                    y-=50;
                }else if(i==7){
                    x+=50;
                    y+=50;
                }
                temp=this.getPeca(x, y);
                if(temp!=-1){
                    bt=this.pecas.get(temp);
                    if (cor.equals("Branco")) {
                        if(bt instanceof PecaVazia||bt.getCor().contains("Preto")){
                            iluminar(temp);
                        }
                    }else{
                        if(bt instanceof PecaVazia||bt.getCor().contains("Branco")){
                            iluminar(temp);
                        }                         
                    }
                }
            x=rei.getX();
            y=rei.getY();
        }
    }
    
    
    private void iluminar(int indice){
        this.pecas.get(indice).setBackground(new Color(0,180,0));
    }
    
    private void limparIluminados(){
        
        for(int i=0;i<this.pecas.size();i++){
            if(this.pecas.get(i).getBackground().equals(new Color(0,180,0))){
                this.pecas.get(i).setBackground(new Color(255,255,255));
            }
        }
    }

    private int getPeca(int x,int y){
        int temp=-1;
        for(int i=0;i<this.pecas.size();i++){
            if(this.pecas.get(i).getX()==x&&this.pecas.get(i).getY()==y){
                temp=i;
            }
        }
        return temp;
    }
    // Rever função, pois os rei que morrer primeiro perde lkkkkkkkkkk
    private boolean jogoTerminou(PecaAbstrata peca){
        boolean flag=true;
        for(int i=0;i<this.pecas.size();i++){
            if(peca.getCor().contains("Branco")){
                if((this.pecas.get(i) instanceof Rei) && (this.pecas.get(i).getCor().contains("Preto"))){
                    flag=false;
                }
            }else{
                if(this.pecas.get(i) instanceof Rei && (this.pecas.get(i).getCor().contains("Branco")) ){
                    flag=false;
                }
            }
        }
        if(flag){
            desabilitaPecas();
        }
        return flag;
    }
    private void desabilitaPecas(){
        for(int i=0;i<this.pecas.size();i++){
            this.pecas.get(i).setEnabled(false);
        }
    }

 
}
